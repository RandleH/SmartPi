


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/CPU
    3 00000000         ;                                    CPU CONFIGURATION &
                        PORT LAYER
    4 00000000         ;
    5 00000000         ;                    Copyright 2004-2020 Silicon Laborat
                       ories Inc. www.silabs.com
    6 00000000         ;
    7 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
    8 00000000         ;
    9 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   10 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   11 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   12 00000000         ;
   13 00000000         ;*******************************************************
                       *************************************************
   14 00000000         
   15 00000000         ;*******************************************************
                       *************************************************
   16 00000000         ;
   17 00000000         ;                                            CPU PORT FI
                       LE
   18 00000000         ;
   19 00000000         ;                                               ARMv6-M
   20 00000000         ;                                           ARM C Compil
                       er
   21 00000000         ;
   22 00000000         ; Filename : cpu_a.asm
   23 00000000         ; Version  : v1.32.00
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         ; Note(s)  : This port supports the ARM Cortex-M0, and C
                       ortex-M0+ architectures.
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         
   28 00000000         
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                           PUBLIC FUNCT
                       IONS
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         
   33 00000000                 EXPORT           CPU_IntDis
   34 00000000                 EXPORT           CPU_IntEn
   35 00000000         
   36 00000000                 EXPORT           CPU_SR_Save
   37 00000000                 EXPORT           CPU_SR_Restore
   38 00000000         
   39 00000000                 EXPORT           CPU_WaitForInt
   40 00000000                 EXPORT           CPU_WaitForExcept
   41 00000000         
   42 00000000         



ARM Macro Assembler    Page 2 


   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   48 00000000                 THUMB
   49 00000000                 REQUIRE8
   50 00000000                 PRESERVE8
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   54 00000000         ;
   55 00000000         ; Description : Disable/Enable interrupts.
   56 00000000         ;
   57 00000000         ; Prototypes  : void  CPU_IntDis(void);
   58 00000000         ;               void  CPU_IntEn (void);
   59 00000000         ;*******************************************************
                       *************************************************
   60 00000000         
   61 00000000         CPU_IntDis
   62 00000000 B672            CPSID            I
   63 00000002 4770            BX               LR
   64 00000004         
   65 00000004         
   66 00000004         CPU_IntEn
   67 00000004 B662            CPSIE            I
   68 00000006 4770            BX               LR
   69 00000008         
   70 00000008         
   71 00000008         ;*******************************************************
                       *************************************************
   72 00000008         ;                                      CRITICAL SECTION 
                       FUNCTIONS
   73 00000008         ;
   74 00000008         ; Description : Disable/Enable interrupts by preserving 
                       the state of interrupts.  Generally speaking, the
   75 00000008         ;               state of the interrupt disable flag is s
                       tored in the local variable 'cpu_sr' & interrupts
   76 00000008         ;               are then disabled ('cpu_sr' is allocated
                        in all functions that need to disable interrupts).
   77 00000008         ;               The previous interrupt state is restored
                        by copying 'cpu_sr' into the CPU's status register.
   78 00000008         ;
   79 00000008         ; Prototypes  : CPU_SR  CPU_SR_Save   (void);
   80 00000008         ;               void    CPU_SR_Restore(CPU_SR  cpu_sr);
   81 00000008         ;
   82 00000008         ; Note(s)     : (1) These functions are used in general 
                       like this :
   83 00000008         ;
   84 00000008         ;                       void  Task (void  *p_arg)
   85 00000008         ;                       {
   86 00000008         ;                           CPU_SR_ALLOC();             
                               /* Allocate storage for CPU status register */



ARM Macro Assembler    Page 3 


   87 00000008         ;                               :
   88 00000008         ;                               :
   89 00000008         ;                           CPU_CRITICAL_ENTER();       
                               /* cpu_sr = CPU_SR_Save();                  */
   90 00000008         ;                               :
   91 00000008         ;                               :
   92 00000008         ;                           CPU_CRITICAL_EXIT();        
                               /* CPU_SR_Restore(cpu_sr);                  */
   93 00000008         ;                               :
   94 00000008         ;                       }
   95 00000008         ;*******************************************************
                       *************************************************
   96 00000008         
   97 00000008         CPU_SR_Save
   98 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   99 0000000C B672            CPSID            I
  100 0000000E 4770            BX               LR
  101 00000010         
  102 00000010         
  103 00000010         CPU_SR_Restore                       ; See Note #2.
  104 00000010 F380 8810       MSR              PRIMASK, R0
  105 00000014 4770            BX               LR
  106 00000016         
  107 00000016         
  108 00000016         ;*******************************************************
                       *************************************************
  109 00000016         ;                                         WAIT FOR INTER
                       RUPT
  110 00000016         ;
  111 00000016         ; Description : Enters sleep state, which will be exited
                        when an interrupt is received.
  112 00000016         ;
  113 00000016         ; Prototypes  : void  CPU_WaitForInt (void)
  114 00000016         ;
  115 00000016         ; Argument(s) : none.
  116 00000016         ;*******************************************************
                       *************************************************
  117 00000016         
  118 00000016         CPU_WaitForInt
  119 00000016 BF30            WFI                          ; Wait for interrup
                                                            t
  120 00000018 4770            BX               LR
  121 0000001A         
  122 0000001A         
  123 0000001A         ;*******************************************************
                       *************************************************
  124 0000001A         ;                                         WAIT FOR EXCEP
                       TION
  125 0000001A         ;
  126 0000001A         ; Description : Enters sleep state, which will be exited
                        when an exception is received.
  127 0000001A         ;
  128 0000001A         ; Prototypes  : void  CPU_WaitForExcept (void)
  129 0000001A         ;
  130 0000001A         ; Argument(s) : none.
  131 0000001A         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 4 


  132 0000001A         
  133 0000001A         CPU_WaitForExcept
  134 0000001A BF20            WFE                          ; Wait for exceptio
                                                            n
  135 0000001C 4770            BX               LR
  136 0000001E         
  137 0000001E         
  138 0000001E         ;*******************************************************
                       *************************************************
  139 0000001E         ;                                     CPU ASSEMBLY PORT 
                       FILE END
  140 0000001E         ;*******************************************************
                       *************************************************
  141 0000001E         
  142 0000001E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\cpu_a.d -o.\obj\cpu_a.o -I.\RTE\_Randle_H -IC:\Keil_v5\ARM\P
ACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include --pr
edefine="__UVISION_VERSION SETA 525" --predefine="STM32F10X_MD SETA 1" --list=.
\list\cpu_a.lst ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 47 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 61 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
   Uses
      At line 33 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 66 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
   Uses
      At line 34 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_IntEn used once
CPU_SR_Restore 00000010

Symbol: CPU_SR_Restore
   Definitions
      At line 103 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.as
m
   Uses
      At line 37 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_SR_Restore used once
CPU_SR_Save 00000008

Symbol: CPU_SR_Save
   Definitions
      At line 97 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
   Uses
      At line 36 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_SR_Save used once
CPU_WaitForExcept 0000001A

Symbol: CPU_WaitForExcept
   Definitions
      At line 133 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.as
m
   Uses
      At line 40 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_WaitForExcept used once
CPU_WaitForInt 00000016

Symbol: CPU_WaitForInt
   Definitions
      At line 118 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.as
m
   Uses
      At line 39 in file ..\Libraries\uC-CPU\ARM-Cortex-M\ARMv6-M\ARM\cpu_a.asm
Comment: CPU_WaitForInt used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

7 symbols
339 symbols in table
