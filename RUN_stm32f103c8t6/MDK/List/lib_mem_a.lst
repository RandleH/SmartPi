


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/LIB
    3 00000000         ;                                       Custom Library M
                       odules
    4 00000000         ;
    5 00000000         ;                    Copyright 2004-2020 Silicon Laborat
                       ories Inc. www.silabs.com
    6 00000000         ;
    7 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
    8 00000000         ;
    9 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   10 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   11 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   12 00000000         ;
   13 00000000         ;*******************************************************
                       *************************************************
   14 00000000         
   15 00000000         
   16 00000000         ;*******************************************************
                       *************************************************
   17 00000000         ;
   18 00000000         ;                                     STANDARD MEMORY OP
                       ERATIONS
   19 00000000         ;
   20 00000000         ;                                           ARM-Cortex-M
                       3
   21 00000000         ;                                     RealView Developme
                       nt Suite
   22 00000000         ;                            RealView Microcontroller De
                       velopment Kit (MDK)
   23 00000000         ;                                      ARM Developer Sui
                       te (ADS)
   24 00000000         ;                                           Keil uVision
                       
   25 00000000         ;
   26 00000000         ; Filename : lib_mem_a.asm
   27 00000000         ; Version  : V1.39.00
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         ; Note(s)  : (1) NO compiler-supplied standard library f
                       unctions are used in library or product software.
   30 00000000         ;
   31 00000000         ;                (a) ALL standard library functions are 
                       implemented in the custom library modules :
   32 00000000         ;
   33 00000000         ;                    (1) \<Custom Library Directory>\lib
                       *.*
   34 00000000         ;
   35 00000000         ;                    (2) \<Custom Library Directory>\Por
                       ts\<cpu>\<compiler>\lib*_a.*
   36 00000000         ;
   37 00000000         ;                          where
   38 00000000         ;                                  <Custom Library Direc
                       tory>      directory path for custom library software



ARM Macro Assembler    Page 2 


   39 00000000         ;                                  <cpu>                
                                  directory name for specific processor (CPU)
   40 00000000         ;                                  <compiler>           
                                  directory name for specific compiler
   41 00000000         ;
   42 00000000         ;                (b) Product-specific library functions 
                       are implemented in individual products.
   43 00000000         ;
   44 00000000         ;            (2) Assumes ARM CPU mode configured for Lit
                       tle Endian.
   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000         
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         ;                                           PUBLIC FUNCT
                       IONS
   50 00000000         ;*******************************************************
                       *************************************************
   51 00000000         
   52 00000000                 EXPORT           Mem_Copy
   53 00000000         
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000                 REQUIRE8
   62 00000000                 PRESERVE8
   63 00000000         
   64 00000000         
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                             Mem_Copy()
                       
   67 00000000         ;
   68 00000000         ; Description : Copy data octets from one buffer to anot
                       her buffer.
   69 00000000         ;
   70 00000000         ; Argument(s) : pdest       Pointer to destination memor
                       y buffer.
   71 00000000         ;
   72 00000000         ;               psrc        Pointer to source      memor
                       y buffer.
   73 00000000         ;
   74 00000000         ;               size        Number of data buffer octets
                        to copy.
   75 00000000         ;
   76 00000000         ; Return(s)   : none.
   77 00000000         ;
   78 00000000         ; Caller(s)   : Application.
   79 00000000         ;



ARM Macro Assembler    Page 3 


   80 00000000         ; Note(s)     : (1) Null copies allowed (i.e. 0-octet si
                       ze).
   81 00000000         ;
   82 00000000         ;               (2) Memory buffers NOT checked for overl
                       apping.
   83 00000000         ;
   84 00000000         ;               (3) Modulo arithmetic is used to determi
                       ne whether a memory buffer starts on a 'CPU_ALIGN'
   85 00000000         ;                   address boundary.
   86 00000000         ;
   87 00000000         ;               (4) ARM Cortex-M3 processors use a subse
                       t of the ARM Thumb-2 instruction set which does
   88 00000000         ;                   NOT support 16-bit conditional branc
                       h instructions but ONLY supports 8-bit conditional
   89 00000000         ;                   branch instructions.
   90 00000000         ;
   91 00000000         ;                   Therefore, branches exceeding 8-bit,
                        signed, relative offsets :
   92 00000000         ;
   93 00000000         ;                   (a) CANNOT be implemented with     c
                       onditional branches; but ...
   94 00000000         ;                   (b) MUST   be implemented with non-c
                       onditional branches.
   95 00000000         ;*******************************************************
                       *************************************************
   96 00000000         
   97 00000000         ; void  Mem_Copy (void        *pdest,       ;  ==>  R0
   98 00000000         ;                 void        *psrc,        ;  ==>  R1
   99 00000000         ;                 CPU_SIZE_T   size)        ;  ==>  R2
  100 00000000         
  101 00000000         Mem_Copy
  102 00000000 2800            CMP              R0, #0
  103 00000002 D100            BNE              Mem_Copy_1
  104 00000004 4770            BX               LR          ; return if pdest =
                                                            = NULL
  105 00000006         
  106 00000006         Mem_Copy_1
  107 00000006 2900            CMP              R1, #0
  108 00000008 D100            BNE              Mem_Copy_2
  109 0000000A 4770            BX               LR          ; return if psrc  =
                                                            = NULL
  110 0000000C         
  111 0000000C         Mem_Copy_2
  112 0000000C 2A00            CMP              R2, #0
  113 0000000E D100            BNE              Mem_Copy_3
  114 00000010 4770            BX               LR          ; return if size  =
                                                            = 0
  115 00000012         
  116 00000012         Mem_Copy_3
  117 00000012 E92D 1FF8       STMFD            SP!, {R3-R12} ; save registers 
                                                            on stack
  118 00000016         
  119 00000016         
  120 00000016         Chk_Align_32                         ; check if both des
                                                            t & src 32-bit alig
                                                            ned
  121 00000016 F000 0303       AND              R3, R0, #0x03
  122 0000001A F001 0403       AND              R4, R1, #0x03
  123 0000001E 42A3            CMP              R3, R4



ARM Macro Assembler    Page 4 


  124 00000020 D111            BNE              Chk_Align_16 ; not 32-bit align
                                                            ed, check for 16-bi
                                                            t alignment
  125 00000022         
  126 00000022 F1C3 0304       RSB              R3, R3, #0x04 ; compute 1-2-3 p
                                                            re-copy bytes (to a
                                                            lign to the next 32
                                                            -bit boundary)
  127 00000026 F003 0303       AND              R3, R3, #0x03
  128 0000002A         
  129 0000002A         Pre_Copy_1
  130 0000002A 2B01            CMP              R3, #1      ; copy 1-2-3 bytes 
                                                            (to align to the ne
                                                            xt 32-bit boundary)
                                                            
  131 0000002C D31D            BCC              Copy_32_1   ; start real 32-bit
                                                             copy
  132 0000002E 2A01            CMP              R2, #1      ; check if any more
                                                             data to copy
  133 00000030 D200            BCS              Pre_Copy_1_Cont
  134 00000032 E0F2            B                Mem_Copy_END ;           no mor
                                                            e data to copy (see
                                                             Note #4b)
  135 00000034         
  136 00000034         Pre_Copy_1_Cont
  137 00000034 F811 4B01       LDRB             R4, [R1], #1
  138 00000038 F800 4B01       STRB             R4, [R0], #1
  139 0000003C F1A3 0301       SUB              R3, R3, #1
  140 00000040 F1A2 0201       SUB              R2, R2, #1
  141 00000044 E7F1            B                Pre_Copy_1
  142 00000046         
  143 00000046         
  144 00000046         Chk_Align_16                         ; check if both des
                                                            t & src 16-bit alig
                                                            ned
  145 00000046 F000 0301       AND              R3, R0, #0x01
  146 0000004A F001 0401       AND              R4, R1, #0x01
  147 0000004E 42A3            CMP              R3, R4
  148 00000050 D000            BEQ              Pre_Copy_2
  149 00000052 E094            B                Copy_08_1   ; not 16-bit aligne
                                                            d, start 8-bit copy
                                                             (see Note #4b)
  150 00000054         
  151 00000054         Pre_Copy_2
  152 00000054 2B01            CMP              R3, #1      ; copy 1 byte (to a
                                                            lign to the next 16
                                                            -bit boundary)
  153 00000056 D344            BCC              Copy_16_1   ; start real 16-bit
                                                             copy
  154 00000058         
  155 00000058 F811 4B01       LDRB             R4, [R1], #1
  156 0000005C F800 4B01       STRB             R4, [R0], #1
  157 00000060 F1A3 0301       SUB              R3, R3, #1
  158 00000064 F1A2 0201       SUB              R2, R2, #1
  159 00000068 E7F4            B                Pre_Copy_2
  160 0000006A         
  161 0000006A         
  162 0000006A         Copy_32_1
  163 0000006A F5B2 7FB4       CMP              R2, #(04*10*09) ; Copy 9 chunks



ARM Macro Assembler    Page 5 


                                                             of 10 32-bit words
                                                             (360 octets per lo
                                                            op)
  164 0000006E D326            BCC              Copy_32_2
  165 00000070 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  166 00000074 E8A0 1FF8       STMIA            R0!, {R3-R12}
  167 00000078 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  168 0000007C E8A0 1FF8       STMIA            R0!, {R3-R12}
  169 00000080 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  170 00000084 E8A0 1FF8       STMIA            R0!, {R3-R12}
  171 00000088 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  172 0000008C E8A0 1FF8       STMIA            R0!, {R3-R12}
  173 00000090 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  174 00000094 E8A0 1FF8       STMIA            R0!, {R3-R12}
  175 00000098 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  176 0000009C E8A0 1FF8       STMIA            R0!, {R3-R12}
  177 000000A0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  178 000000A4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  179 000000A8 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  180 000000AC E8A0 1FF8       STMIA            R0!, {R3-R12}
  181 000000B0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  182 000000B4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  183 000000B8 F5A2 72B4       SUB              R2, R2, #(04*10*09)
  184 000000BC E7D5            B                Copy_32_1
  185 000000BE         
  186 000000BE         Copy_32_2
  187 000000BE 2A28            CMP              R2, #(04*10*01) ; Copy chunks o
                                                            f 10 32-bit words (
                                                            40 octets per loop)
                                                            
  188 000000C0 D306            BCC              Copy_32_3
  189 000000C2 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  190 000000C6 E8A0 1FF8       STMIA            R0!, {R3-R12}
  191 000000CA F1A2 0228       SUB              R2, R2, #(04*10*01)
  192 000000CE E7F6            B                Copy_32_2
  193 000000D0         
  194 000000D0         Copy_32_3
  195 000000D0 2A04            CMP              R2, #(04*01*01) ; Copy remainin
                                                            g 32-bit words
  196 000000D2 D306            BCC              Copy_16_1
  197 000000D4 F851 3B04       LDR              R3, [R1], #4
  198 000000D8 F840 3B04       STR              R3, [R0], #4
  199 000000DC F1A2 0204       SUB              R2, R2, #(04*01*01)
  200 000000E0 E7F6            B                Copy_32_3
  201 000000E2         
  202 000000E2         Copy_16_1
  203 000000E2 2A20            CMP              R2, #(02*01*16) ; Copy chunks o
                                                            f 16 16-bit words (
                                                            32 bytes per loop)
  204 000000E4 D342            BCC              Copy_16_2
  205 000000E6 F831 3B02       LDRH             R3, [R1], #2
  206 000000EA F820 3B02       STRH             R3, [R0], #2
  207 000000EE F831 3B02       LDRH             R3, [R1], #2
  208 000000F2 F820 3B02       STRH             R3, [R0], #2
  209 000000F6 F831 3B02       LDRH             R3, [R1], #2
  210 000000FA F820 3B02       STRH             R3, [R0], #2
  211 000000FE F831 3B02       LDRH             R3, [R1], #2
  212 00000102 F820 3B02       STRH             R3, [R0], #2
  213 00000106 F831 3B02       LDRH             R3, [R1], #2



ARM Macro Assembler    Page 6 


  214 0000010A F820 3B02       STRH             R3, [R0], #2
  215 0000010E F831 3B02       LDRH             R3, [R1], #2
  216 00000112 F820 3B02       STRH             R3, [R0], #2
  217 00000116 F831 3B02       LDRH             R3, [R1], #2
  218 0000011A F820 3B02       STRH             R3, [R0], #2
  219 0000011E F831 3B02       LDRH             R3, [R1], #2
  220 00000122 F820 3B02       STRH             R3, [R0], #2
  221 00000126 F831 3B02       LDRH             R3, [R1], #2
  222 0000012A F820 3B02       STRH             R3, [R0], #2
  223 0000012E F831 3B02       LDRH             R3, [R1], #2
  224 00000132 F820 3B02       STRH             R3, [R0], #2
  225 00000136 F831 3B02       LDRH             R3, [R1], #2
  226 0000013A F820 3B02       STRH             R3, [R0], #2
  227 0000013E F831 3B02       LDRH             R3, [R1], #2
  228 00000142 F820 3B02       STRH             R3, [R0], #2
  229 00000146 F831 3B02       LDRH             R3, [R1], #2
  230 0000014A F820 3B02       STRH             R3, [R0], #2
  231 0000014E F831 3B02       LDRH             R3, [R1], #2
  232 00000152 F820 3B02       STRH             R3, [R0], #2
  233 00000156 F831 3B02       LDRH             R3, [R1], #2
  234 0000015A F820 3B02       STRH             R3, [R0], #2
  235 0000015E F831 3B02       LDRH             R3, [R1], #2
  236 00000162 F820 3B02       STRH             R3, [R0], #2
  237 00000166 F1A2 0220       SUB              R2, R2, #(02*01*16)
  238 0000016A E7BA            B                Copy_16_1
  239 0000016C         
  240 0000016C         Copy_16_2
  241 0000016C 2A02            CMP              R2, #(02*01*01) ; Copy remainin
                                                            g 16-bit words
  242 0000016E D306            BCC              Copy_08_1
  243 00000170 F831 3B02       LDRH             R3, [R1], #2
  244 00000174 F820 3B02       STRH             R3, [R0], #2
  245 00000178 F1A2 0202       SUB              R2, R2, #(02*01*01)
  246 0000017C E7F6            B                Copy_16_2
  247 0000017E         
  248 0000017E         Copy_08_1
  249 0000017E 2A10            CMP              R2, #(01*01*16) ; Copy chunks o
                                                            f 16 8-bit words (1
                                                            6 bytes per loop)
  250 00000180 D342            BCC              Copy_08_2
  251 00000182 F811 3B01       LDRB             R3, [R1], #1
  252 00000186 F800 3B01       STRB             R3, [R0], #1
  253 0000018A F811 3B01       LDRB             R3, [R1], #1
  254 0000018E F800 3B01       STRB             R3, [R0], #1
  255 00000192 F811 3B01       LDRB             R3, [R1], #1
  256 00000196 F800 3B01       STRB             R3, [R0], #1
  257 0000019A F811 3B01       LDRB             R3, [R1], #1
  258 0000019E F800 3B01       STRB             R3, [R0], #1
  259 000001A2 F811 3B01       LDRB             R3, [R1], #1
  260 000001A6 F800 3B01       STRB             R3, [R0], #1
  261 000001AA F811 3B01       LDRB             R3, [R1], #1
  262 000001AE F800 3B01       STRB             R3, [R0], #1
  263 000001B2 F811 3B01       LDRB             R3, [R1], #1
  264 000001B6 F800 3B01       STRB             R3, [R0], #1
  265 000001BA F811 3B01       LDRB             R3, [R1], #1
  266 000001BE F800 3B01       STRB             R3, [R0], #1
  267 000001C2 F811 3B01       LDRB             R3, [R1], #1
  268 000001C6 F800 3B01       STRB             R3, [R0], #1
  269 000001CA F811 3B01       LDRB             R3, [R1], #1



ARM Macro Assembler    Page 7 


  270 000001CE F800 3B01       STRB             R3, [R0], #1
  271 000001D2 F811 3B01       LDRB             R3, [R1], #1
  272 000001D6 F800 3B01       STRB             R3, [R0], #1
  273 000001DA F811 3B01       LDRB             R3, [R1], #1
  274 000001DE F800 3B01       STRB             R3, [R0], #1
  275 000001E2 F811 3B01       LDRB             R3, [R1], #1
  276 000001E6 F800 3B01       STRB             R3, [R0], #1
  277 000001EA F811 3B01       LDRB             R3, [R1], #1
  278 000001EE F800 3B01       STRB             R3, [R0], #1
  279 000001F2 F811 3B01       LDRB             R3, [R1], #1
  280 000001F6 F800 3B01       STRB             R3, [R0], #1
  281 000001FA F811 3B01       LDRB             R3, [R1], #1
  282 000001FE F800 3B01       STRB             R3, [R0], #1
  283 00000202 F1A2 0210       SUB              R2, R2, #(01*01*16)
  284 00000206 E7BA            B                Copy_08_1
  285 00000208         
  286 00000208         Copy_08_2
  287 00000208 2A01            CMP              R2, #(01*01*01) ; Copy remainin
                                                            g 8-bit words
  288 0000020A D306            BCC              Mem_Copy_END
  289 0000020C F811 3B01       LDRB             R3, [R1], #1
  290 00000210 F800 3B01       STRB             R3, [R0], #1
  291 00000214 F1A2 0201       SUB              R2, R2, #(01*01*01)
  292 00000218 E7F6            B                Copy_08_2
  293 0000021A         
  294 0000021A         
  295 0000021A         Mem_Copy_END
  296 0000021A E8BD 1FF8       LDMFD            SP!, {R3-R12} ; restore registe
                                                            rs from stack
  297 0000021E 4770            BX               LR          ; return
  298 00000220         
  299 00000220         
  300 00000220                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\lib_mem_a.d -o.\obj\lib_mem_a.o -I.\RTE\_Randle_H -IC:\Keil_
v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Incl
ude --predefine="__UVISION_VERSION SETA 525" --predefine="STM32F10X_MD SETA 1" 
--list=.\list\lib_mem_a.lst ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\li
b_mem_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_m
em_a.asm
   Uses
      None
Comment: .text unused
Chk_Align_16 00000046

Symbol: Chk_Align_16
   Definitions
      At line 144 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 124 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
Comment: Chk_Align_16 used once
Chk_Align_32 00000016

Symbol: Chk_Align_32
   Definitions
      At line 120 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      None
Comment: Chk_Align_32 unused
Copy_08_1 0000017E

Symbol: Copy_08_1
   Definitions
      At line 248 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 149 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 242 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 284 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_08_2 00000208

Symbol: Copy_08_2
   Definitions
      At line 286 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 250 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 292 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_16_1 000000E2

Symbol: Copy_16_1
   Definitions
      At line 202 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

mem_a.asm
   Uses
      At line 153 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 196 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 238 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_16_2 0000016C

Symbol: Copy_16_2
   Definitions
      At line 240 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 204 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 246 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_32_1 0000006A

Symbol: Copy_32_1
   Definitions
      At line 162 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 131 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 184 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_32_2 000000BE

Symbol: Copy_32_2
   Definitions
      At line 186 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 164 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 192 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Copy_32_3 000000D0

Symbol: Copy_32_3
   Definitions
      At line 194 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 188 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 200 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Mem_Copy 00000000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: Mem_Copy
   Definitions
      At line 101 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 52 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_m
em_a.asm
Comment: Mem_Copy used once
Mem_Copy_1 00000006

Symbol: Mem_Copy_1
   Definitions
      At line 106 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 103 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
Comment: Mem_Copy_1 used once
Mem_Copy_2 0000000C

Symbol: Mem_Copy_2
   Definitions
      At line 111 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 108 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
Comment: Mem_Copy_2 used once
Mem_Copy_3 00000012

Symbol: Mem_Copy_3
   Definitions
      At line 116 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 113 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
Comment: Mem_Copy_3 used once
Mem_Copy_END 0000021A

Symbol: Mem_Copy_END
   Definitions
      At line 295 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 134 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 288 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

Pre_Copy_1 0000002A

Symbol: Pre_Copy_1
   Definitions
      At line 129 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 141 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: Pre_Copy_1 used once
Pre_Copy_1_Cont 00000034

Symbol: Pre_Copy_1_Cont
   Definitions
      At line 136 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 133 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
Comment: Pre_Copy_1_Cont used once
Pre_Copy_2 00000054

Symbol: Pre_Copy_2
   Definitions
      At line 151 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
   Uses
      At line 148 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm
      At line 159 in file ..\Libraries\uC-LIB\Ports\ARM-Cortex-M3\RealView\lib_
mem_a.asm

18 symbols
350 symbols in table
