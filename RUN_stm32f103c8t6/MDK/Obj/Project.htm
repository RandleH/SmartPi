<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 10 14:43:22 2021
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[da]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[32]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">GUI_AsserParam</a> from glu_glucoo.o(i.GUI_AsserParam) referenced 2 times from glu_glucoo.o(.data)
 <LI><a href="#[f]">GUI_Delay</a> from glu_glucoo.o(i.GUI_Delay) referenced 2 times from glu_glucoo.o(.data)
 <LI><a href="#[c]">GUI_DrawArea</a> from glu_glucoo.o(i.GUI_DrawArea) referenced 2 times from glu_glucoo.o(.data)
 <LI><a href="#[d]">GUI_DummyDrawPixel</a> from glu_glucoo.o(i.GUI_DummyDrawPixel) referenced 2 times from glu_glucoo.o(.data)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">SSD1306_API_DrawArea</a> from ssd1306.o(i.SSD1306_API_DrawArea) referenced from glu_api.o(i.GUI_API_Init)
 <LI><a href="#[1c]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[22]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[91]">__ApplyPixel_cpblur</a> from blk_graphic.o(i.__ApplyPixel_cpblur) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[92]">__ApplyPixel_eor</a> from blk_graphic.o(i.__ApplyPixel_eor) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[8d]">__ApplyPixel_fill</a> from blk_graphic.o(i.__ApplyPixel_fill) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[8e]">__ApplyPixel_lightness</a> from blk_graphic.o(i.__ApplyPixel_lightness) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[8b]">__ApplyPixel_mark</a> from blk_graphic.o(i.__ApplyPixel_mark) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[90]">__ApplyPixel_reverse</a> from blk_graphic.o(i.__ApplyPixel_reverse) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[8c]">__ApplyPixel_unmark</a> from blk_graphic.o(i.__ApplyPixel_unmark) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[8f]">__ApplyPixel_unzero</a> from blk_graphic.o(i.__ApplyPixel_unzero) referenced from blk_graphic.o(.constdata)
 <LI><a href="#[87]">__TaskStatic_led_heart</a> from rh_task.o(i.__TaskStatic_led_heart) referenced from rh_task.o(i.__Task_init)
 <LI><a href="#[85]">__TaskStatic_main</a> from rh_task.o(i.__TaskStatic_main) referenced from rh_task.o(i.__Task_init)
 <LI><a href="#[86]">__TaskStatic_radio_check</a> from rh_task.o(i.__TaskStatic_radio_check) referenced from rh_task.o(i.__Task_init)
 <LI><a href="#[71]">__gui_adjust_object_bar_h</a> from glu_object.o(i.__gui_adjust_object_bar_h) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6b]">__gui_adjust_object_fnum</a> from glu_object.o(i.__gui_adjust_object_fnum) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[74]">__gui_adjust_object_joystick</a> from glu_object.o(i.__gui_adjust_object_joystick) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[68]">__gui_adjust_object_num</a> from glu_object.o(i.__gui_adjust_object_num) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6e]">__gui_adjust_object_switch</a> from glu_object.o(i.__gui_adjust_object_switch) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[65]">__gui_adjust_object_text</a> from glu_object.o(i.__gui_adjust_object_text) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6f]">__gui_insert_object_bar_h</a> from glu_object.o(i.__gui_insert_object_bar_h) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[69]">__gui_insert_object_fnum</a> from glu_object.o(i.__gui_insert_object_fnum) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[72]">__gui_insert_object_joystick</a> from glu_object.o(i.__gui_insert_object_joystick) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[66]">__gui_insert_object_num</a> from glu_object.o(i.__gui_insert_object_num) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6c]">__gui_insert_object_switch</a> from glu_object.o(i.__gui_insert_object_switch) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[63]">__gui_insert_object_text</a> from glu_object.o(i.__gui_insert_object_text) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[70]">__gui_remove_object_bar_h</a> from glu_object.o(i.__gui_remove_object_bar_h) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6a]">__gui_remove_object_fnum</a> from glu_object.o(i.__gui_remove_object_fnum) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[73]">__gui_remove_object_joystick</a> from glu_object.o(i.__gui_remove_object_joystick) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[67]">__gui_remove_object_num</a> from glu_object.o(i.__gui_remove_object_num) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[6d]">__gui_remove_object_switch</a> from glu_object.o(i.__gui_remove_object_switch) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[64]">__gui_remove_object_text</a> from glu_object.o(i.__gui_remove_object_text) referenced from glu_object.o(i.GUI_object_create)
 <LI><a href="#[93]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[76]">__subtask_0x00000000_CTRL</a> from rh_subtask.o(i.__subtask_0x00000000_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[75]">__subtask_0x00000000_UI</a> from rh_subtask.o(i.__subtask_0x00000000_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[78]">__subtask_0x00000001_CTRL</a> from rh_subtask.o(i.__subtask_0x00000001_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[77]">__subtask_0x00000001_UI</a> from rh_subtask.o(i.__subtask_0x00000001_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7a]">__subtask_0x00000011_CTRL</a> from rh_subtask.o(i.__subtask_0x00000011_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[79]">__subtask_0x00000011_UI</a> from rh_subtask.o(i.__subtask_0x00000011_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7e]">__subtask_0x00000012_CTRL</a> from rh_subtask.o(i.__subtask_0x00000012_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7d]">__subtask_0x00000012_UI</a> from rh_subtask.o(i.__subtask_0x00000012_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[80]">__subtask_0x00000013_CTRL</a> from rh_subtask.o(i.__subtask_0x00000013_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7f]">__subtask_0x00000013_UI</a> from rh_subtask.o(i.__subtask_0x00000013_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[82]">__subtask_0x00000015_CTRL</a> from rh_subtask.o(i.__subtask_0x00000015_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[81]">__subtask_0x00000015_UI</a> from rh_subtask.o(i.__subtask_0x00000015_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7c]">__subtask_0x00000112_CTRL</a> from rh_subtask.o(i.__subtask_0x00000112_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[7b]">__subtask_0x00000112_UI</a> from rh_subtask.o(i.__subtask_0x00000112_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[84]">__subtask_default_CTRL</a> from rh_subtask.o(i.__subtask_default_CTRL) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[83]">__subtask_default_UI</a> from rh_subtask.o(i.__subtask_default_UI) referenced from rh_task.o(i.__TaskStatic_main)
 <LI><a href="#[5e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[60]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5f]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[89]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[88]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[8a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[14]">rhtt_GetCodepointBitmapBox</a> from glu_font.o(i.rhtt_GetCodepointBitmapBox) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[13]">rhtt_GetCodepointHMetrics</a> from glu_font.o(i.rhtt_GetCodepointHMetrics) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[12]">rhtt_GetFontVMetrics</a> from glu_font.o(i.rhtt_GetFontVMetrics) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[10]">rhtt_InitFont</a> from glu_font.o(i.rhtt_InitFont) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[15]">rhtt_MakeCodepointBitmap</a> from glu_font.o(i.rhtt_MakeCodepointBitmap) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[11]">rhtt_ScaleForPixelHeight</a> from glu_font.o(i.rhtt_ScaleForPixelHeight) referenced 2 times from glu_font.o(.data)
 <LI><a href="#[61]">vEventGroupSetBitsCallback</a> from event_groups.o(i.vEventGroupSetBitsCallback) referenced from stm32f10x_it.o(i.EXTI9_5_IRQHandler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[93]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e7]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e8]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[97]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[99]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ea]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[203]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[207]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[208]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[209]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[db]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ab]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ae]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_MakeCodepointBitmap
</UL>

<P><STRONG><a name="[af]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_push
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
</UL>

<P><STRONG><a name="[b2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[b3]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
</UL>

<P><STRONG><a name="[9a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[126]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[ba]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memgrab_Area
</UL>

<P><STRONG><a name="[bc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[20d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[be]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[212]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[c3]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c5]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_title
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[215]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9e]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[216]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9c]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ca]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[cd]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[b6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[218]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[b5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[5f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[21e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[d3]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[cf]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1ce]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d8]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d7]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ac]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[dc]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[dd]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d0]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[de]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[e0]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e1]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d1]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[d2]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[e2]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e3]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[e5]"></a>ADC_DMACmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[e6]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_GetCalibrationStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[e7]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_GetResetCalibrationStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[e8]"></a>ADC_Init</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[e9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[ea]"></a>ADC_ResetCalibration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ResetCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[eb]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SoftwareStartConvCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[ec]"></a>ADC_StartCalibration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>

<P><STRONG><a name="[ed]"></a>BEEP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, beeper.o(i.BEEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BEEP_Init &rArr; __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>BEEP_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, beeper.o(i.BEEP_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BEEP_Set &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_CTRL
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>DMA_Cmd</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configDMA
</UL>

<P><STRONG><a name="[f3]"></a>DMA_DeInit</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configDMA
</UL>

<P><STRONG><a name="[f4]"></a>DMA_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configDMA
</UL>

<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EXTI9_5_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>EXTI_GetITStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configEXTI
</UL>

<P><STRONG><a name="[f9]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>

<P><STRONG><a name="[fa]"></a>GPIO_Init</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>

<P><STRONG><a name="[f1]"></a>GPIO_ResetBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_SetBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
</UL>

<P><STRONG><a name="[fc]"></a>GPIO_WriteBit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeBuf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__readBuf
</UL>

<P><STRONG><a name="[190]"></a>GUI_API_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glu_api.o(i.GUI_API_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>GUI_AddScreenArea</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, glu_glucoo.o(i.GUI_AddScreenArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_AddScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_push
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
</UL>

<P><STRONG><a name="[e]"></a>GUI_AsserParam</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glu_glucoo.o(i.GUI_AsserParam))
<BR>[Address Reference Count : 1]<UL><LI> glu_glucoo.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>GUI_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glu_glucoo.o(i.GUI_Delay))
<BR>[Address Reference Count : 1]<UL><LI> glu_glucoo.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>GUI_DrawArea</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, glu_glucoo.o(i.GUI_DrawArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DrawArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_glucoo.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>GUI_DummyDrawPixel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glu_glucoo.o(i.GUI_DummyDrawPixel))
<BR>[Address Reference Count : 1]<UL><LI> glu_glucoo.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>GUI_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, glu_glucoo.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_Init &rArr; __Stack_createBase &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>GUI_RefreashEntireScreen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, glu_glucoo.o(i.GUI_RefreashEntireScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_RefreashEntireScreen &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[108]"></a>GUI_RefreashScreen</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, glu_glucoo.o(i.GUI_RefreashScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_RefreashScreen &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_empty
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[109]"></a>GUI_RefreashScreenArea</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, glu_glucoo.o(i.GUI_RefreashScreenArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memgrab_Area
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
</UL>

<P><STRONG><a name="[111]"></a>GUI_is_AutoDisplay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glu_glucoo.o(i.GUI_is_AutoDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
</UL>

<P><STRONG><a name="[10b]"></a>GUI_menu_create</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, glu_menu.o(i.GUI_menu_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_menu_create &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[10d]"></a>GUI_menu_delete</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, glu_menu.o(i.GUI_menu_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUI_menu_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[113]"></a>GUI_menu_frame</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, glu_menu.o(i.GUI_menu_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_menu_frame &rArr; __Font_restore_config &rArr; __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[117]"></a>GUI_menu_insert</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, glu_menu.o(i.GUI_menu_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_menu_insert &rArr; __gui_insert_menu_bar &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_title
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[11b]"></a>GUI_menu_scroll</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, glu_menu.o(i.GUI_menu_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_menu_scroll &rArr; __gui_scroll_menu_up &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
</UL>

<P><STRONG><a name="[11e]"></a>GUI_object_adjust</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, glu_object.o(i.GUI_object_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_object_adjust &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[11f]"></a>GUI_object_create</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, glu_object.o(i.GUI_object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GUI_object_create &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_check_object
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[122]"></a>GUI_object_delete</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, glu_object.o(i.GUI_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUI_object_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[123]"></a>GUI_object_frame</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, glu_object.o(i.GUI_object_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_object_frame &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
</UL>

<P><STRONG><a name="[124]"></a>GUI_object_insert</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, glu_object.o(i.GUI_object_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_object_insert &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_is_AutoDisplay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[125]"></a>GUI_object_template</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, glu_object.o(i.GUI_object_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_object_template &rArr; hypotf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>I2C_CheckEvent</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[12d]"></a>I2C_Cmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[12e]"></a>I2C_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[130]"></a>I2C_GenerateSTART</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_GenerateSTART
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[131]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_GenerateSTOP
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[132]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[133]"></a>I2C_Init</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[135]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Send7bitAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[136]"></a>I2C_SendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>

<P><STRONG><a name="[137]"></a>JoyStick_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, joystick.o(i.JoyStick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = JoyStick_Init &rArr; __configDMA &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configNVIC
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configEXTI
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configDMA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>LED_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>LED_Set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Set &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_CTRL
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_led_heart
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>NRF24L01_Check</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf24l01.o(i.NRF24L01_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NRF24L01_Check &rArr; __writeBuf &rArr; __transferByte &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeBuf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[143]"></a>NRF24L01_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf24l01.o(i.NRF24L01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NRF24L01_Init &rArr; NRF24L01_Check &rArr; __writeBuf &rArr; __transferByte &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configSPI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>NVIC_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configNVIC
</UL>

<P><STRONG><a name="[147]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configNVIC
</UL>

<P><STRONG><a name="[148]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configDMA
</UL>

<P><STRONG><a name="[149]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[12f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[14a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configGPIO
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configADC
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>

<P><STRONG><a name="[134]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[14b]"></a>SPI_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configSPI
</UL>

<P><STRONG><a name="[14c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transferByte
</UL>

<P><STRONG><a name="[14d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transferByte
</UL>

<P><STRONG><a name="[14e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transferByte
</UL>

<P><STRONG><a name="[14f]"></a>SPI_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configSPI
</UL>

<P><STRONG><a name="[62]"></a>SSD1306_API_DrawArea</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ssd1306.o(i.SSD1306_API_DrawArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSD1306_API_DrawArea &rArr; __writeDat &rArr; __writeByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeDat
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_api.o(i.GUI_API_Init)
</UL>
<P><STRONG><a name="[152]"></a>SSD1306_Clean</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssd1306.o(i.SSD1306_Clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SSD1306_Clean &rArr; __writeDat &rArr; __writeByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeDat
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[153]"></a>SSD1306_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, ssd1306.o(i.SSD1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SSD1306_Init &rArr; __configI2C &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Clean
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[18b]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[15a]"></a>__Event_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rh_task.o(i.__Event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Event_init &rArr; xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>__Font_backup_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, glu_font.o(i.__Font_backup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Font_backup_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
</UL>

<P><STRONG><a name="[15c]"></a>__Font_exportStr</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, glu_font.o(i.__Font_exportStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_title
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[161]"></a>__Font_getWordNum</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, glu_font.o(i.__Font_getWordNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Font_getWordNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_title
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[106]"></a>__Font_init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, glu_font.o(i.__Font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __Font_init &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[116]"></a>__Font_restore_config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, glu_font.o(i.__Font_restore_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __Font_restore_config &rArr; __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
</UL>

<P><STRONG><a name="[163]"></a>__Font_setSize</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, glu_font.o(i.__Font_setSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_title
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[118]"></a>__Font_setStyle</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, glu_font.o(i.__Font_setStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
</UL>

<P><STRONG><a name="[10e]"></a>__Graph_backup_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blk_graphic.o(i.__Graph_backup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Graph_backup_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
</UL>

<P><STRONG><a name="[164]"></a>__Graph_circle_fill</STRONG> (Thumb, 614 bytes, Stack size 56 bytes, blk_graphic.o(i.__Graph_circle_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __Graph_circle_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[165]"></a>__Graph_circle_qrt1_raw</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, blk_graphic.o(i.__Graph_circle_qrt1_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __Graph_circle_qrt1_raw &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[166]"></a>__Graph_circle_qrt2_raw</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, blk_graphic.o(i.__Graph_circle_qrt2_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __Graph_circle_qrt2_raw &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[167]"></a>__Graph_circle_qrt3_raw</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, blk_graphic.o(i.__Graph_circle_qrt3_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __Graph_circle_qrt3_raw &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[168]"></a>__Graph_circle_qrt4_raw</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, blk_graphic.o(i.__Graph_circle_qrt4_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __Graph_circle_qrt4_raw &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[169]"></a>__Graph_circle_raw</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, blk_graphic.o(i.__Graph_circle_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __Graph_circle_raw &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[105]"></a>__Graph_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, blk_graphic.o(i.__Graph_init))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[110]"></a>__Graph_rect_fill</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, blk_graphic.o(i.__Graph_rect_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[115]"></a>__Graph_rect_raw</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, blk_graphic.o(i.__Graph_rect_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Graph_rect_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
</UL>

<P><STRONG><a name="[112]"></a>__Graph_restore_config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, blk_graphic.o(i.__Graph_restore_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Graph_restore_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
</UL>

<P><STRONG><a name="[16a]"></a>__Graph_sausage_fill</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, blk_graphic.o(i.__Graph_sausage_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Graph_sausage_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
</UL>

<P><STRONG><a name="[16b]"></a>__Graph_sausage_raw</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, blk_graphic.o(i.__Graph_sausage_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Graph_sausage_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
</UL>

<P><STRONG><a name="[10f]"></a>__Graph_set_penColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blk_graphic.o(i.__Graph_set_penColor))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_menu_bar
</UL>

<P><STRONG><a name="[178]"></a>__Point_toCord2D</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, blk_math.o(i.__Point_toCord2D))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[104]"></a>__Stack_createBase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, blk_data.o(i.__Stack_createBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Stack_createBase &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[100]"></a>__Stack_empty</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, blk_data.o(i.__Stack_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Stack_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>

<P><STRONG><a name="[fe]"></a>__Stack_pop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, blk_data.o(i.__Stack_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Stack_pop &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[102]"></a>__Stack_push</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, blk_data.o(i.__Stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Stack_push &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[87]"></a>__TaskStatic_led_heart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rh_task.o(i.__TaskStatic_led_heart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __TaskStatic_led_heart &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__Task_init)
</UL>
<P><STRONG><a name="[85]"></a>__TaskStatic_main</STRONG> (Thumb, 2276 bytes, Stack size 40 bytes, rh_task.o(i.__TaskStatic_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __TaskStatic_main &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_push
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__Task_init)
</UL>
<P><STRONG><a name="[86]"></a>__TaskStatic_radio_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rh_task.o(i.__TaskStatic_radio_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __TaskStatic_radio_check &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__Task_init)
</UL>
<P><STRONG><a name="[175]"></a>__Task_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rh_task.o(i.__Task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __Task_init &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>

<P><STRONG><a name="[182]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[183]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[10a]"></a>__memgrab_Area</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, blk_lib.o(i.__memgrab_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __memgrab_Area
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
</UL>

<P><STRONG><a name="[76]"></a>__subtask_0x00000000_CTRL</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000000_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000000_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[75]"></a>__subtask_0x00000000_UI</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, rh_subtask.o(i.__subtask_0x00000000_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000000_UI &rArr; GUI_menu_scroll &rArr; __gui_scroll_menu_up &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[78]"></a>__subtask_0x00000001_CTRL</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000001_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000001_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[77]"></a>__subtask_0x00000001_UI</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, rh_subtask.o(i.__subtask_0x00000001_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000001_UI &rArr; GUI_menu_scroll &rArr; __gui_scroll_menu_up &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7a]"></a>__subtask_0x00000011_CTRL</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000011_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000011_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[79]"></a>__subtask_0x00000011_UI</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, rh_subtask.o(i.__subtask_0x00000011_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000011_UI &rArr; GUI_menu_scroll &rArr; __gui_scroll_menu_up &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7e]"></a>__subtask_0x00000012_CTRL</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rh_subtask.o(i.__subtask_0x00000012_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __subtask_0x00000012_CTRL &rArr; xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7d]"></a>__subtask_0x00000012_UI</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, rh_subtask.o(i.__subtask_0x00000012_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000012_UI &rArr; GUI_object_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[80]"></a>__subtask_0x00000013_CTRL</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000013_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000013_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7f]"></a>__subtask_0x00000013_UI</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, rh_subtask.o(i.__subtask_0x00000013_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000013_UI &rArr; GUI_object_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[82]"></a>__subtask_0x00000015_CTRL</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000015_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000015_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Set
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[81]"></a>__subtask_0x00000015_UI</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, rh_subtask.o(i.__subtask_0x00000015_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000015_UI &rArr; GUI_object_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7c]"></a>__subtask_0x00000112_CTRL</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_0x00000112_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_0x00000112_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[7b]"></a>__subtask_0x00000112_UI</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, rh_subtask.o(i.__subtask_0x00000112_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __subtask_0x00000112_UI &rArr; GUI_object_frame &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[84]"></a>__subtask_default_CTRL</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rh_subtask.o(i.__subtask_default_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __subtask_default_CTRL &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[83]"></a>__subtask_default_UI</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, rh_subtask.o(i.__subtask_default_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __subtask_default_UI &rArr; GUI_object_delete &rArr; GUI_RefreashScreenArea &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_task.o(i.__TaskStatic_main)
</UL>
<P><STRONG><a name="[b8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e4]"></a>assert_failed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_API_DrawArea
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Event_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_sausage_fill
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_insert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_frame
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_adjust
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_check_object
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_scroll_menu_down
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_push
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_pop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_empty
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_sausage_raw
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_ScaleForPixelHeight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_MakeCodepointBitmap
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_InitFont
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetFontVMetrics
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetCodepointHMetrics
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetCodepointBitmapBox
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_unzero
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_unmark
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_reverse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_mark
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_lightness
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_fill
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_eor
</UL>

<P><STRONG><a name="[179]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[17a]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[18d]"></a>delay_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_init &rArr; SysTick_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[127]"></a>hypotf</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, hypotf.o(i.hypotf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hypotf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
</UL>

<P><STRONG><a name="[a7]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Event_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_API_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[121]"></a>pvPortCalloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, heap_4.o(i.pvPortCalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
</UL>

<P><STRONG><a name="[101]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_create
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_raw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt4_raw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt3_raw
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt2_raw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt1_raw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_fill
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[1a4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[14]"></a>rhtt_GetCodepointBitmapBox</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, glu_font.o(i.rhtt_GetCodepointBitmapBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rhtt_GetCodepointBitmapBox
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>rhtt_GetCodepointHMetrics</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, glu_font.o(i.rhtt_GetCodepointHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rhtt_GetCodepointHMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>rhtt_GetFontVMetrics</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, glu_font.o(i.rhtt_GetFontVMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rhtt_GetFontVMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>rhtt_InitFont</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, glu_font.o(i.rhtt_InitFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rhtt_InitFont
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>rhtt_MakeCodepointBitmap</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, glu_font.o(i.rhtt_MakeCodepointBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rhtt_MakeCodepointBitmap &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>rhtt_ScaleForPixelHeight</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, glu_font.o(i.rhtt_ScaleForPixelHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rhtt_ScaleForPixelHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_font.o(.data)
</UL>
<P><STRONG><a name="[15f]"></a>roundf</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
</UL>

<P><STRONG><a name="[17b]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>

<P><STRONG><a name="[18f]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>

<P><STRONG><a name="[193]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1c6]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1c1]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rh_task.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1cd]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rh_task.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[61]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(i.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_it.o(i.EXTI9_5_IRQHandler)
</UL>
<P><STRONG><a name="[199]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1a3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[195]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[194]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[16d]"></a>vPortEnterCritical</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[170]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[ff]"></a>vPortFree</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_delete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_delete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashEntireScreen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_raw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt4_raw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt3_raw
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt2_raw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt1_raw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_fill
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1c7]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1ba]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[19b]"></a>vQueueAddToRegistry</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1af]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[16c]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_CTRL
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_CTRL
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_CTRL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_CTRL
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_CTRL
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_CTRL
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_radio_check
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_led_heart
</UL>

<P><STRONG><a name="[172]"></a>vTaskDelete</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[1cb]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1b6]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1be]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1bc]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1bf]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1c0]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[173]"></a>vTaskResume</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[191]"></a>vTaskStartScheduler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>vTaskSuspend</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[1ad]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ad]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[16e]"></a>xEventGroupClearBits</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_CTRL
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_CTRL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_CTRL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_CTRL
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_CTRL
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[15b]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, event_groups.o(i.xEventGroupCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Event_init
</UL>

<P><STRONG><a name="[188]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, event_groups.o(i.xEventGroupGetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupGetBitsFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_CTRL
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_CTRL
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_CTRL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_CTRL
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_CTRL
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_CTRL
</UL>

<P><STRONG><a name="[189]"></a>xEventGroupSetBits</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_CTRL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_CTRL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_CTRL
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_CTRL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_UI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_CTRL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_CTRL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_CTRL
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_CTRL
</UL>

<P><STRONG><a name="[171]"></a>xEventGroupWaitBits</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_default_UI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000112_UI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000015_UI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000013_UI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000012_CTRL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000011_UI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000001_UI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subtask_0x00000000_UI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[1c3]"></a>xPortStartScheduler</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[159]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19a]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1a1]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1ca]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[1ab]"></a>xQueueReceive</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1cc]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[16f]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TaskStatic_main
</UL>

<P><STRONG><a name="[176]"></a>xTaskCreateStatic</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Task_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1c4]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1b0]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1c9]"></a>xTaskIncrementTick</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1b5]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1ae]"></a>xTaskResumeAll</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1c2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f6]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
</UL>

<P><STRONG><a name="[1cf]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
</UL>

<P><STRONG><a name="[1d2]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1d0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
</UL>

<P><STRONG><a name="[1d3]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_template
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[1d5]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d8]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1dd]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[1da]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1db]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[220]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[221]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[1dc]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1e0]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1de]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d4]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[1d7]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>

<P><STRONG><a name="[1df]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[18c]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1e1]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1b9]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1e3]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[98]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1d9]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[17d]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[1e4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[156]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[157]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[154]"></a>__configI2C</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ssd1306.o(i.__configI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __configI2C &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[18a]"></a>__writeByte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ssd1306.o(i.__writeByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __writeByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeDat
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeCmd
</UL>

<P><STRONG><a name="[150]"></a>__writeCmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssd1306.o(i.__writeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __writeCmd &rArr; __writeByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_API_DrawArea
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Clean
</UL>

<P><STRONG><a name="[151]"></a>__writeDat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssd1306.o(i.__writeDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __writeDat &rArr; __writeByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_API_DrawArea
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Clean
</UL>

<P><STRONG><a name="[13c]"></a>__configADC</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, joystick.o(i.__configADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __configADC &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
</UL>

<P><STRONG><a name="[13b]"></a>__configDMA</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, joystick.o(i.__configDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __configDMA &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
</UL>

<P><STRONG><a name="[139]"></a>__configEXTI</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, joystick.o(i.__configEXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __configEXTI &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
</UL>

<P><STRONG><a name="[138]"></a>__configGPIO</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, joystick.o(i.__configGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
</UL>

<P><STRONG><a name="[13a]"></a>__configNVIC</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, joystick.o(i.__configNVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __configNVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JoyStick_Init
</UL>

<P><STRONG><a name="[13e]"></a>__configGPIO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, led.o(i.__configGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[ee]"></a>__configGPIO</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, beeper.o(i.__configGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
</UL>

<P><STRONG><a name="[144]"></a>__configGPIO</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf24l01.o(i.__configGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __configGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[145]"></a>__configSPI</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf24l01.o(i.__configSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __configSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[142]"></a>__readBuf</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf24l01.o(i.__readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __readBuf &rArr; __transferByte &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[187]"></a>__transferByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf24l01.o(i.__transferByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __transferByte &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__writeBuf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__readBuf
</UL>

<P><STRONG><a name="[141]"></a>__writeBuf</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf24l01.o(i.__writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __writeBuf &rArr; __transferByte &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[11a]"></a>__gui_insert_menu_bar</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, glu_menu.o(i.__gui_insert_menu_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __gui_insert_menu_bar &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
</UL>

<P><STRONG><a name="[119]"></a>__gui_insert_menu_title</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, glu_menu.o(i.__gui_insert_menu_title))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __gui_insert_menu_title &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_insert
</UL>

<P><STRONG><a name="[11d]"></a>__gui_scroll_menu_down</STRONG> (Thumb, 1628 bytes, Stack size 64 bytes, glu_menu.o(i.__gui_scroll_menu_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __gui_scroll_menu_down &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
</UL>

<P><STRONG><a name="[11c]"></a>__gui_scroll_menu_up</STRONG> (Thumb, 1546 bytes, Stack size 64 bytes, glu_menu.o(i.__gui_scroll_menu_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __gui_scroll_menu_up &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_menu_scroll
</UL>

<P><STRONG><a name="[71]"></a>__gui_adjust_object_bar_h</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_bar_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __gui_adjust_object_bar_h &rArr; __gui_insert_object_bar_h &rArr; __gui_remove_object_bar_h &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[6b]"></a>__gui_adjust_object_fnum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_fnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __gui_adjust_object_fnum &rArr; __gui_insert_object_fnum &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[74]"></a>__gui_adjust_object_joystick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_joystick))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __gui_adjust_object_joystick &rArr; __gui_insert_object_joystick &rArr; __gui_remove_object_joystick &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[68]"></a>__gui_adjust_object_num</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __gui_adjust_object_num &rArr; __gui_insert_object_num &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[6e]"></a>__gui_adjust_object_switch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __gui_adjust_object_switch &rArr; __gui_insert_object_switch &rArr; __gui_remove_object_switch &rArr; __Font_restore_config &rArr; __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[65]"></a>__gui_adjust_object_text</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_adjust_object_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __gui_adjust_object_text &rArr; __gui_insert_object_text &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[120]"></a>__gui_check_object</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, glu_object.o(i.__gui_check_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __gui_check_object
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_object_create
</UL>

<P><STRONG><a name="[6f]"></a>__gui_insert_object_bar_h</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, glu_object.o(i.__gui_insert_object_bar_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __gui_insert_object_bar_h &rArr; __gui_remove_object_bar_h &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_bar_h
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_bar_h
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[69]"></a>__gui_insert_object_fnum</STRONG> (Thumb, 728 bytes, Stack size 96 bytes, glu_object.o(i.__gui_insert_object_fnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __gui_insert_object_fnum &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_fnum
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_fnum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[72]"></a>__gui_insert_object_joystick</STRONG> (Thumb, 718 bytes, Stack size 96 bytes, glu_object.o(i.__gui_insert_object_joystick))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __gui_insert_object_joystick &rArr; __gui_remove_object_joystick &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Point_toCord2D
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_joystick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_raw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt4_raw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt3_raw
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt2_raw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_qrt1_raw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_fill
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_joystick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[66]"></a>__gui_insert_object_num</STRONG> (Thumb, 656 bytes, Stack size 72 bytes, glu_object.o(i.__gui_insert_object_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __gui_insert_object_num &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_num
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[6c]"></a>__gui_insert_object_switch</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, glu_object.o(i.__gui_insert_object_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __gui_insert_object_switch &rArr; __gui_remove_object_switch &rArr; __Font_restore_config &rArr; __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_sausage_fill
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_switch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_sausage_raw
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_raw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_circle_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[63]"></a>__gui_insert_object_text</STRONG> (Thumb, 746 bytes, Stack size 48 bytes, glu_object.o(i.__gui_insert_object_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __gui_insert_object_text &rArr; __Font_exportStr &rArr; pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_setSize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_getWordNum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_exportStr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_adjust_object_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[70]"></a>__gui_remove_object_bar_h</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, glu_object.o(i.__gui_remove_object_bar_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __gui_remove_object_bar_h &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_bar_h
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[6a]"></a>__gui_remove_object_fnum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_remove_object_fnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __gui_remove_object_fnum &rArr; __gui_remove_object_text &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_fnum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[73]"></a>__gui_remove_object_joystick</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, glu_object.o(i.__gui_remove_object_joystick))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __gui_remove_object_joystick &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_joystick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[67]"></a>__gui_remove_object_num</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glu_object.o(i.__gui_remove_object_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __gui_remove_object_num &rArr; __gui_remove_object_text &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_text
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[6d]"></a>__gui_remove_object_switch</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, glu_object.o(i.__gui_remove_object_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __gui_remove_object_switch &rArr; __Font_restore_config &rArr; __Font_setSize &rArr; __Font_setStyle &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_sausage_fill
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_restore_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[64]"></a>__gui_remove_object_text</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, glu_object.o(i.__gui_remove_object_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __gui_remove_object_text &rArr; __Graph_rect_fill &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_restore_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_backup_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_raw
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_num
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_remove_object_fnum
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gui_insert_object_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glu_object.o(i.GUI_object_create)
</UL>
<P><STRONG><a name="[1c5]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[19e]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[19f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1a0]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[1a6]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1b4]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[192]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[196]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[19c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[19d]"></a>prvDeleteTCB</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[89]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1a2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[197]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1bd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1b2]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[198]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1b3]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1a5]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1a7]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1a9]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ac]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1a8]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1aa]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1b1]"></a>prvSwitchTimerLists</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[8a]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[88]"></a>prvTaskExitError</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1b7]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b8]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[91]"></a>__ApplyPixel_cpblur</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, blk_graphic.o(i.__ApplyPixel_cpblur))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __ApplyPixel_cpblur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>__ApplyPixel_eor</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, blk_graphic.o(i.__ApplyPixel_eor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __ApplyPixel_eor
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>__ApplyPixel_fill</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, blk_graphic.o(i.__ApplyPixel_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __ApplyPixel_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>__ApplyPixel_lightness</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, blk_graphic.o(i.__ApplyPixel_lightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __ApplyPixel_lightness
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>__ApplyPixel_mark</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, blk_graphic.o(i.__ApplyPixel_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __ApplyPixel_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>__ApplyPixel_reverse</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blk_graphic.o(i.__ApplyPixel_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __ApplyPixel_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>__ApplyPixel_unmark</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blk_graphic.o(i.__ApplyPixel_unmark))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __ApplyPixel_unmark
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>__ApplyPixel_unzero</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blk_graphic.o(i.__ApplyPixel_unzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __ApplyPixel_unzero
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blk_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1d6]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ce]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[60]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
